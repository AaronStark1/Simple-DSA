typedef struct  
{ 
    int data[100]; 
    int top; 
} Stack; 
void initStack(Stack *s)  
{ 
    s->top = -1; 
} 
bool isEmpty(Stack *s)  
{ 
    return s->top == -1; 
} 
void pushStack(Stack *s, int x)  
{ 
    s->data[++(s->top)] = x; 
} 
int popStack(Stack *s)  
{ 
    return s->data[(s->top)--]; 
} 
int peekStack(Stack *s)  
{ 
    return s->data[s->top]; 
} 
typedef struct  
{ 
    Stack stack1;  
    Stack stack2; 
} MyQueue; 
 
MyQueue* myQueueCreate()  
{ 
    MyQueue *queue = (MyQueue*)malloc(sizeof(MyQueue)); 
    initStack(&(queue->stack1)); 
    initStack(&(queue->stack2)); 
    return queue; 
} 
void myQueuePush(MyQueue* q, int x)  
{ 
    pushStack(&(q->stack1), x); 
} 
int myQueuePop(MyQueue* q)  
{ 
    if (isEmpty(&(q->stack2)))  
    { 
        while (!isEmpty(&(q->stack1)))  
        { 
            pushStack(&(q->stack2), popStack(&(q->stack1))); 
        } 
    } 
    return popStack(&(q->stack2)); 
} 
int myQueuePeek(MyQueue* q)  
{ 
    if (isEmpty(&(q->stack2)))  
    { 
        while (!isEmpty(&(q->stack1)))  
        { 
            pushStack(&(q->stack2), popStack(&(q->stack1))); 
        } 
    } 
    return peekStack(&(q->stack2)); 
} 
bool myQueueEmpty(MyQueue* q)  
{ 
    return isEmpty(&(q->stack1)) && isEmpty(&(q->stack2)); 
} 
void myQueueFree(MyQueue* q)  
{ 
    free(q); 
}
